body {
  margin: 0;
  padding: 0;
}

@protoWidth: 10px;
.proto {
  position: absolute;
  bottom: 0;
  left: 0;
  height: @protoWidth;
  width: @protoWidth;
  border: solid 2px #2980b9;
  background: rgba(255, 255, 255, .5);
}

.twoDimensions {
  .coordinate {
    display: inline-block;
    position: relative;
    height: 600px;
    width: 600px;
    margin: 10px;
    border-left: solid 1px black;
    border-bottom: solid 1px black;
  }

  @pointRadius: 10px;
  .point {
    position: absolute;
    bottom: 0;
    left: 0;
    height: @pointRadius;
    width: @pointRadius;
    border-radius: 100%;
    background: #e74c3c;
    &:before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 2px;
      width: 2px;
      border-radius: 100%;
      background: white;
    }
  }

  .tooltip {
    display: none;
  }

  .proto, .point {
    &:hover {
      .tooltip {
        display: block;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 5px;
        background: rgba(255, 255, 255, .9);
        text-align: center;
        font-family: Arial;
      }
    }
  }

  .ui, .stats {
    display: inline-block;
    vertical-align: top;
    width: 200px;
  }

  button {
    display: inline;
    height: 100px;
    width: 100%;
    margin: 5px;
    border: none;
    cursor: pointer;
    color: white;
    background: #2c3e50;
    &:hover {
      background: #2c3e50 + #111111;
    }
    &:active {
      background: #2c3e50 - #111111;
    }
  }

  .input_number {
    text-align: center;
  }

  input[type=number] {
    display: block;
    height: 100px;
    width: 100%;
    margin: 5px;
    background: #2c3e50;
    color: white;
    text-align: center;
    font-size: 25px;
  }

}

.threeDimensions {

  position: absolute;
  top: 20%;
  left: 50%;
  transform: translate(-50%, -50%);
  @cubeWidth: 380px;
  .wrap {
    perspective: 800px;
    perspective-origin: 50% 100px;
  }
  .point {
    height: 10px;
    width: 10px;
    border-radius: 50%;
    background: red;
    /* box-shadow: 0 3em 2.5em -2.5em rgba(53, 64, 73, .6), 0 0 1em -0.35em rgba(255, 255, 255, .2),
       0 -1em 1.1em 0 rgba(255, 255, 255, .5) inset, 0 0 2.5em 0 rgba(0, 0, 0, .4) inset;
     background: radial-gradient(circle at 33% -25%, rgba(255, 255, 255, 0) 40%, rgba(0, 0, 0, .07) 50%),
     radial-gradient(circle at 50% 135%, rgba(0, 0, 0, .23) 43%, rgba(255, 255, 255, 0)),
     radial-gradient(circle at 50% -35%, rgba(255, 255, 255, .8) 45%, rgba(255, 255, 255, 0)),
     radial-gradient(circle at 50% 0, #fff, #d5d5d5);
     background-size: 150%, 100%, 100%, 100%;*/
  }
  .point, .proto {
    position: absolute;
    top: -50%;
    left: 0;
    //Point centered in the cube, then positionned to the front bottom left and then centered itself
    transform: translate3d(0, @cubeWidth, @cubeWidth/2);
  }
  .cube {
    position: relative;
    width: @cubeWidth;
    transform-style: preserve-3d;
  }
  .cube .face {
    position: absolute;
    width: @cubeWidth;
    height: @cubeWidth;
    background: rgba(0, 0, 0, .1);
    border: solid 1px black;
  }
  .back {
    transform: translateZ(@cubeWidth/-2) rotateY(180deg);
    border-bottom: solid 2px red;
  }
  .right {
    transform: rotateY(-270deg) translateX(@cubeWidth/2);
    transform-origin: top right;
    border-left: solid 2px green;
  }
  .left {
    transform: rotateY(270deg) translateX(@cubeWidth/-2);
    transform-origin: center left;
    border-left: solid 2px red;
    border-bottom: solid 2px red;
  }
  .top {
    transform: rotateX(-90deg) translateY(@cubeWidth/-2);
    transform-origin: top center;
    border-right: solid 3px green;
  }
  .bottom {
    transform: rotateX(90deg) translateY(@cubeWidth/2);
    transform-origin: bottom center;
  }
  .front {
    transform: translateZ(@cubeWidth/2);
    border-top: solid 3px green;
  }
  @keyframes spin {
    from {
      transform: rotateY(0) rotateX(0deg);
    }
    to {
      transform: rotateY(360deg) rotateX(0deg);
    }
  }
  @keyframes reverseSpinMove {
    from {
      transform: translate3d(0, @cubeWidth/2, 0) translateX(@cubeWidth/-2) translateY(@cubeWidth/2) translateZ(@cubeWidth/2) translate(-50%, -50%) rotateY(360deg) rotateX(0deg);
    }
    to {
      transform: translate3d(0, @cubeWidth/2, 0) translateX(@cubeWidth/-2) translateY(@cubeWidth/2) translateZ(@cubeWidth/2) translate(-50%, -50%) rotateY(0) rotateX(0deg);
    }
  }

  .cube {
    //transform: rotateY(95deg);
    animation: spin 50s infinite linear;
  }
  .point {
    //Comments for now, it could break point positionning. Gonna animate it in js
    //animation: reverseSpinMove 10s infinite linear;
  }
}

.colorContainer {
  &, * {
    box-sizing: border-box;
  }
  position: absolute;
  height: 100%;
  width: 100%;
  word-wrap: break-word;
  color: white;
  font-size: 3vw;
  font-family: 'Roboto', 'Montserrat', 'Open Sans', sans-serif;
  line-height: 6vw;
  text-align: center;
  .colorDistanceValue {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 99;

    margin: 0;
    padding: 0;
    height: 50%;
    width: 100px;

    color: white;
    border: solid 1px white;
    background: black;
    //font-size: 1vw;
    line-height: 60px;
  }
  .colorCouple {
    position: relative;
    height: 120px;
  }
  .rail {
    position: relative;
    float: left;
    height: 100%;
    width: 50%;
    background: black;

    &.left {
      left: 0;
    }
    &.right {
      right: 0;
    }
    .railInnerCont {
      position: absolute;
      height: 100%;
      width: 100%;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
      align-content: center;
      align-items: center;
    }
    .innerText {
      display: block;
      padding: 10px 0;
      margin: auto;
      width: 90%;

      background: none;
    }
  }
}
*{
  //border:solid 1px blue!important;
}